module SSH;

@load logging

export {
	# Create a new ID for our log stream
	#redef enum Logging::ID += { LOG_SSH };

	# Define a record with all the columns the log file can have.
	# (I'm using a subset of fields from ssh-ext for demonstration.)
	type Log: record {
		t: time;
		id: conn_id; # Will be rolled out into individual columns.
		status: string &optional;
		country: string &default="unknown";
	};
	
	# This is the prototype for the event that the logging framework tries
	# to generate if there is a handler for it.
	#global log: event(rec: Log);
}

event bro_init()
{
	# Create the stream.
	# First argument is the ID for the stream.
	# Second argument is the log record type.
	Logging::create_stream("ssh", "SSH::Log");

	# Add a default filter that simply logs everything to "ssh.log" using the default writer.
	# Log line event generation is autogenerated for now by checking for 
	# handlers for MODULE_NAME::log (which isn't the right thing to do, but it will be dealt with later)
	Logging::add_default_filter("ssh");
	
	# There is currently some problem with &optional values in the records 
	# passed into the predicate.  Maybe it's because I'm not really coercing
	# the record to the correct record type before passing it as an argument
	# to the Call method?
	
	# There is also a problem with using &optional sets in the filter records.
	#   It was found when trying to include the "select" variable.
	
	# Printing headers for the filters doesn't work yet either and needs to 
	# be considered in the final design. (based on the "select" set).
	#Logging::add_filter("ssh", [$name="successful logins",
	#                            #$pred(rec: Log) = { print rec$status; return T; },
	#                            $path="ssh-logins",
	#                            #$select=set("t"),
	#                            $writer=Logging::WRITER_CSV]);
	
	# Log something.
	Logging::log("ssh", [$t=network_time(),$status="success"]);
	Logging::log("ssh", [$t=network_time(),$status="failure", $country="US"]);
	Logging::log("ssh", [$t=network_time(),$status="failure", $country="UK"]);
	Logging::log("ssh", [$t=network_time(),$status="success", $country="BR"]);
	Logging::log("ssh", [$t=network_time(),$status="failure", $country="MX"]);
	
}

#event log(rec: Log)
#	{
#	print fmt("Ran the log handler from the same module.  Extracting time: %0.6f", rec$t);
#	}
#
#
#module WHATEVER;
#
#event SSH::log(rec: SSH::Log)
#	{
#	print fmt("Ran the SSH::log handler from a different module.  Extracting time: %0.6f", rec$t);
#	}